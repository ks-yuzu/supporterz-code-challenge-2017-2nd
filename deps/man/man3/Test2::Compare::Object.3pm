.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test2::Compare::Object 3pm"
.TH Test2::Compare::Object 3pm "2017-10-26" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::Compare::Object \- Representation of an object during deep
comparison.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class lets you specify an expected object in a deep comparison. You can
check the fields/elements of the underlying reference, call methods to verify
results, and do meta checks for object type and ref type.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$class = $obj\->meta_class" 4
.el .IP "\f(CW$class\fR = \f(CW$obj\fR\->meta_class" 4
.IX Item "$class = $obj->meta_class"
The meta-class to be used when checking the object type. This is mainly listed
because it is useful to override for specialized object subclasses.
.Sp
This normally just returns Test2::Compare::Meta.
.ie n .IP "$class = $obj\->object_base" 4
.el .IP "\f(CW$class\fR = \f(CW$obj\fR\->object_base" 4
.IX Item "$class = $obj->object_base"
The base-class to be expected when checking the object type. This is mainly
listed because it is useful to override for specialized object subclasses.
.Sp
This normally just returns '\s-1UNIVERSAL\s0'.
.ie n .IP "$obj\->add_prop(...)" 4
.el .IP "\f(CW$obj\fR\->add_prop(...)" 4
.IX Item "$obj->add_prop(...)"
Add a meta-property to check, see Test2::Compare::Meta. This method
just delegates.
.ie n .IP "$obj\->add_field(...)" 4
.el .IP "\f(CW$obj\fR\->add_field(...)" 4
.IX Item "$obj->add_field(...)"
Add a hash-field to check, see Test2::Compare::Hash. This method
just delegates.
.ie n .IP "$obj\->add_item(...)" 4
.el .IP "\f(CW$obj\fR\->add_item(...)" 4
.IX Item "$obj->add_item(...)"
Add an array item to check, see Test2::Compare::Array. This method
just delegates.
.ie n .IP "$obj\->add_call($method, $check)" 4
.el .IP "\f(CW$obj\fR\->add_call($method, \f(CW$check\fR)" 4
.IX Item "$obj->add_call($method, $check)"
.PD 0
.ie n .IP "$obj\->add_call($method, $check, $name)" 4
.el .IP "\f(CW$obj\fR\->add_call($method, \f(CW$check\fR, \f(CW$name\fR)" 4
.IX Item "$obj->add_call($method, $check, $name)"
.ie n .IP "$obj\->add_call($method, $check, $name, $context)" 4
.el .IP "\f(CW$obj\fR\->add_call($method, \f(CW$check\fR, \f(CW$name\fR, \f(CW$context\fR)" 4
.IX Item "$obj->add_call($method, $check, $name, $context)"
.PD
Add a method call check. This will call the specified method on your object and
verify the result. \f(CW$method\fR may be a method name, an array ref, or a coderef.
.Sp
If it's an arrayref, the first element must be the method name, and
the rest are arguments that will be passed to it.
.Sp
In the case of a coderef it can be helpful to provide an alternate
name. When no name is provided the name is either \f(CW$method\fR or the
string '\e&CODE'.
.Sp
If \f(CW$context\fR is \f(CW\*(Aqlist\*(Aq\fR, the method will be invoked in list
context, and the result will be an arrayref.
.Sp
If \f(CW$context\fR is \f(CW\*(Aqhash\*(Aq\fR, the method will be invoked in list
context, and the result will be a hashref (this will warn if the
method returns an odd number of values).
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2\-Suite can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Suite/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2016 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR

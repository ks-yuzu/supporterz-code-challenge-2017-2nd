.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test2::Compare::Custom 3pm"
.TH Test2::Compare::Custom 3pm "2017-10-26" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test2::Compare::Custom \- Custom field check for comparisons.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Sometimes you want to do something complicated or unusual when validating a
field nested inside a deep data structure. You could pull it out of the
structure and test it separately, or you can use this to embed the check. This
provides a way for you to write custom checks for fields in deep comparisons.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&    my $cus = Test2::Compare::Custom\->new(
\&        name => \*(AqIsRef\*(Aq,
\&        operator => \*(Aqref(...)\*(Aq,
\&        code => sub {
\&            my %args = @_;
\&            return $args{got} ? 1 : 0;
\&        },
\&    );
\&
\&    # Pass
\&    is(
\&        { a => 1, ref => {},   b => 2 },
\&        { a => 1, ref => $cus, b => 2 },
\&        "This will pass"
\&    );
\&
\&    # Fail
\&    is(
\&        {a => 1, ref => \*(Aqnotref\*(Aq, b => 2},
\&        {a => 1, ref => $cus,     b => 2},
\&        "This will fail"
\&    );
.Ve
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
Your custom sub will be passed 4 arguments in a hash:
.PP
.Vb 5
\&    code => sub {
\&        my %args = @_;
\&        # provides got, exists, operator, name
\&        return ref($args{got}) ? 1 : 0;
\&    },
.Ve
.PP
\&\f(CW$_\fR is also localized to \f(CW\*(C`got\*(C'\fR to make it easier for those who need to use
regexes.
.IP "got" 4
.IX Item "got"
.PD 0
.ie n .IP "$_" 4
.el .IP "\f(CW$_\fR" 4
.IX Item "$_"
.PD
The value to be checked.
.IP "exists" 4
.IX Item "exists"
This will be a boolean. This will be true if \f(CW\*(C`got\*(C'\fR exists at all. If
\&\f(CW\*(C`exists\*(C'\fR is false then it means \f(CW\*(C`got\*(C'\fR is not simply undef, but doesn't
exist at all (think checking the value of a hash key that does not exist).
.IP "operator" 4
.IX Item "operator"
The operator specified at construction.
.IP "name" 4
.IX Item "name"
The name provided at construction.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$code = $cus\->code" 4
.el .IP "\f(CW$code\fR = \f(CW$cus\fR\->code" 4
.IX Item "$code = $cus->code"
Returns the coderef provided at construction.
.ie n .IP "$name = $cus\->name" 4
.el .IP "\f(CW$name\fR = \f(CW$cus\fR\->name" 4
.IX Item "$name = $cus->name"
Returns the name provided at construction.
.ie n .IP "$op = $cus\->operator" 4
.el .IP "\f(CW$op\fR = \f(CW$cus\fR\->operator" 4
.IX Item "$op = $cus->operator"
Returns the operator provided at construction.
.ie n .IP "$bool = $cus\->verify(got => $got, exists => $bool)" 4
.el .IP "\f(CW$bool\fR = \f(CW$cus\fR\->verify(got => \f(CW$got\fR, exists => \f(CW$bool\fR)" 4
.IX Item "$bool = $cus->verify(got => $got, exists => $bool)"
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2\-Suite can be found at
\&\fIhttp://github.com/Test\-More/Test2\-Suite/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2016 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
